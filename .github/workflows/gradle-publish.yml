# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행
  release:
    types: [created]  # 릴리즈가 생성될 때 실행

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 📌 1. GitHub 저장소 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 📌 2. JDK 17 설정 (Spring Boot 프로젝트 빌드)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 📌 3. application-prod.properties 생성
      - name: Create application-prod.properties
        run: |
          # application-prod.properties 파일 생성
          touch src/main/resources/application-prod.properties

          # GitHub Secrets에서 환경 변수 가져와서 파일에 저장
          echo "spring.db.datasource.jdbc-url=${{ secrets.DB_URL }}" >> src/main/resources/application-prod.properties
          echo "spring.db.datasource.username=${{ secrets.DB_ID }}" >> src/main/resources/application-prod.properties
          echo "spring.db.datasource.password=${{ secrets.DB_PW }}" >> src/main/resources/application-prod.properties
          echo "spring.db.datasource.driver-class-name=${{ secrets.DB_DRIVER }}" >> src/main/resources/application-prod.properties
          echo "spring.jpa.hibernate.ddl-auto=${{ secrets.JPA_DDL_AUTO }}" >> src/main/resources/application-prod.properties
          echo "spring.jpa.generate-ddl=${{ secrets.JPA_GEN_DDL }}" >> src/main/resources/application-prod.properties
          echo "spring.jpa.show-sql=${{ secrets.JPA_SHOW_SQL }}" >> src/main/resources/application-prod.properties
          echo "api.access.token.secretkey=${{ secrets.JWT_SECRETKEY }}" >> src/main/resources/application-prod.properties
        shell: bash

      # 📌 3. Gradle 설정 (빌드 캐싱 활성화)
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # 📌 4. Spring Boot 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 📌 5. Docker 이미지 빌드 (Docker Hub가 아니라 Synology NAS에서 관리)
      - name: Build Docker Image
        run: |
          docker build -t pofol .

      # 📌 6. Jenkins 트리거 (배포 요청)
      - name: Notify Jenkins for Deployment
        run: |
          curl -X POST https://${{ secrets.JENKINS_SERVER }}/job/DeployPortfolioWebAPI/build \
          --user "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}"